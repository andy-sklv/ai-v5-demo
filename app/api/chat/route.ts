// app/api/chat/route.ts
// @ts-nocheck
import { NextRequest } from 'next/server';
import { streamText, tool } from 'ai';
import { createOpenAI } from '@ai-sdk/openai';
import { z } from 'zod';
import { SYSTEM_PROMPT } from '@/lib/systemPrompt';

export const runtime = 'edge';

/* ------- helper: –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ @datadog/toto ------- */
async function runWithTrace<T>(_name: string, _meta: Record<string, any>, fn: () => Promise<T>): Promise<T> {
  return await fn();
}

/* ----- –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ (—à—É–Ω—Ç–∏–Ω–≥-—è—Ä–¥) ----- */
function evalExpr(expr: string): number {
  if (!expr || typeof expr !== 'string') throw new Error('empty expression');
  const s = expr.replace(/,/g, '.').replace(/\s+/g, '');
  const ops: Record<string, { p: number; fn: (a: number, b: number) => number }> = {
    '+': { p: 1, fn: (a, b) => a + b },
    '-': { p: 1, fn: (a, b) => a - b },
    '*': { p: 2, fn: (a, b) => a * b },
    '/': { p: 2, fn: (a, b) => a / b },
    '%': { p: 2, fn: (a, b) => a % b }
  };
  const tokens: string[] = [];
  for (let i = 0; i < s.length; ) {
    const c = s[i];
    if (/\d|\./.test(c)) {
      let j = i + 1; while (j < s.length && /[\d.]/.test(s[j])) j++;
      tokens.push(s.slice(i, j)); i = j; continue;
    }
    if (c in ops || c === '(' || c === ')') { tokens.push(c); i++; continue; }
    throw new Error(`invalid char '${c}'`);
  }
  const out: string[] = [], st: string[] = [];
  for (const t of tokens) {
    if (/^\d+(\.\d+)?$/.test(t)) out.push(t);
    else if (t in ops) {
      while (st.length) {
        const top = st[st.length - 1];
        if (top in ops && ops[top].p >= ops[t].p) out.push(st.pop()!);
        else break;
      }
      st.push(t);
    } else if (t === '(') st.push(t);
    else if (t === ')') {
      while (st.length && st[st.length - 1] !== '(') out.push(st.pop()!);
      if (!st.length) throw new Error('unbalanced )'); st.pop();
    }
  }
  while (st.length) {
    const x = st.pop()!; if (x === '(') throw new Error('unbalanced ('); out.push(x);
  }
  const vs: number[] = [];
  for (const t of out) {
    if (/^\d+(\.\d+)?$/.test(t)) vs.push(parseFloat(t));
    else if (t in ops) {
      const b = vs.pop(); const a = vs.pop();
      if (a == null || b == null) throw new Error('bad expression');
      const v = ops[t].fn(a, b); if (!Number.isFinite(v)) throw new Error('non-finite'); vs.push(v);
    }
  }
  if (vs.length !== 1) throw new Error('bad expression');
  return vs[0];
}

/* ---------------- TOOLS ---------------- */

// time
const time = tool({
  description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ IANA-—á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, Europe/London).',
  inputSchema: z.object({ timezone: z.string().optional() }),
  async execute({ timezone }) {
    const tz = timezone || 'UTC';
    try {
      const fmt = new Intl.DateTimeFormat('ru-RU', {
        timeZone: tz, year: 'numeric', month: '2-digit', day: '2-digit',
        hour: '2-digit', minute: '2-digit', second: '2-digit'
      } as any);
      return { now: fmt.format(new Date()), timezone: tz };
    } catch {
      return { now: new Date().toISOString(), timezone: tz };
    }
  }
});

/* -------- —Ä—É—Å—Å–∫–∏–µ –≥–æ—Ä–æ–¥–∞: –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–µ–¥–ª–æ–∂–Ω–æ–≥–æ –ø–∞–¥–µ–∂–∞ -------- */
const RU_LOCATIVE_MAP: Record<string, string> = {
  '–º–æ—Å–∫–≤–µ': '–ú–æ—Å–∫–≤–∞',
  '—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥–µ': '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
  '—Ä–æ—Å—Ç–æ–≤–µ-–Ω–∞-–¥–æ–Ω—É': '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É',
  '–Ω–∏–∂–Ω–µ–º –Ω–æ–≤–≥–æ—Ä–æ–¥–µ': '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥',
  '–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–µ': '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥',
  '–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–µ': '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫',
  '–∫—Ä–∞—Å–Ω–æ–¥–∞—Ä–µ': '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä',
  '–≤–æ—Ä–æ–Ω–µ–∂–µ': '–í–æ—Ä–æ–Ω–µ–∂',
  '—Å–∞–º–∞—Ä–µ': '–°–∞–º–∞—Ä–∞',
  '—Ç—é–º–µ–Ω–∏': '–¢—é–º–µ–Ω—å',
  '–ø–µ—Ä–º–∏': '–ü–µ—Ä–º—å',
  '–∫–∞–∑–∞–Ω–∏': '–ö–∞–∑–∞–Ω—å',
  '—É—Ñ–µ': '–£—Ñ–∞',
  '—Ç–≤–µ—Ä–∏': '–¢–≤–µ—Ä—å',
  '—è—Ä–æ—Å–ª–∞–≤–ª–µ': '–Ø—Ä–æ—Å–ª–∞–≤–ª—å',
  '—Å–æ—á–∏': '–°–æ—á–∏',
  '–ø–∞—Ä–∏–∂–µ': '–ü–∞—Ä–∏–∂'
};
function normalizeRuLocative(city: string) {
  const key = city.toLowerCase().trim();
  if (RU_LOCATIVE_MAP[key]) return RU_LOCATIVE_MAP[key];
  // –æ–±—â–µ–µ –ø—Ä–∞–≤–∏–ª–æ: —Å–ª–æ–≤–∞ —Ç–∏–ø–∞ "‚Ä¶–µ" —á–∞—Å—Ç–æ ‚Üí "‚Ä¶–∞" (–ú–æ—Å–∫–≤–∞/–ú–æ—Å–∫–≤–µ, –°–∞–º–∞—Ä–∞/–°–∞–º–∞—Ä–µ)
  if (/^[–ê-–Ø–Å][–∞-—è—ë\- ]+–µ$/.test(city) && !/\s–≥–æ—Ä–æ–¥/i.test(city)) {
    const base = city.slice(0, -1) + '–∞';
    return base;
  }
  // —É–±—Ä–∞—Ç—å —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–ª–æ–≤–∞/–∫–∞–≤—ã—á–∫–∏ –∏ –ª–∏—à–Ω–∏–µ —Ö–≤–æ—Å—Ç—ã
  return city
    .replace(/[¬´¬ª"‚Äú‚Äù]/g, '')
    .replace(/^(–≥\.|–≥–æ—Ä–æ–¥)\s+/iu, '')
    .replace(/\s+(?:–ø—Ä—è–º–æ\s+—Å–µ–π—á–∞—Å|—Å–µ–π—á–∞—Å|—Å–µ–≥–æ–¥–Ω—è)\s*$/iu, '')
    .replace(/[.,!?;:]+$/u, '')
    .replace(/\s+/g, ' ')
    .trim();
}

// weather
const weather = tool({
  description: '–†–µ–∞–ª—å–Ω–∞—è –ø–æ–≥–æ–¥–∞ —á–µ—Ä–µ–∑ Open-Meteo.',
  inputSchema: z.object({ city: z.string(), units: z.enum(['auto','celsius','fahrenheit']).optional() }),
  async execute({ city, units }) {
    const q = normalizeRuLocative(city);
    const geoUrl = `https://geocoding-api.open-meteo.com/v1/search?name=${encodeURIComponent(q)}&count=1&language=ru&format=json`;
    const g = await fetch(geoUrl); if (!g.ok) return { city: q, error: `geocoding failed: ${g.status}` };
    const gj = await g.json(); const first = gj?.results?.[0]; if (!first) return { city: q, error: 'city_not_found' };
    const lat = first.latitude, lon = first.longitude;
    const tempUnit = units === 'fahrenheit' ? 'fahrenheit' : 'celsius';
    const windUnit = units === 'fahrenheit' ? 'mph' : 'kmh';
    const url = `https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lon}&current=temperature_2m,weather_code,wind_speed_10m&temperature_unit=${tempUnit}&wind_speed_unit=${windUnit}&timezone=auto`;
    const w = await fetch(url); if (!w.ok) return { city: first.name, error: `weather failed: ${w.status}` };
    const wj = await w.json(); const cur = wj?.current; if (!cur) return { city: first.name, error: 'no_current_weather' };
    const map: Record<number, string> = {
      0:'‚òÄÔ∏è –Ø—Å–Ω–æ',1:'üå§ –í –æ—Å–Ω. —è—Å–Ω–æ',2:'‚õÖ –û–±–ª–∞—á–Ω–æ',3:'‚òÅÔ∏è –ü–∞—Å–º—É—Ä–Ω–æ',
      45:'üå´ –¢—É–º–∞–Ω',48:'üå´ –ò–Ω–µ–π',51:'üå¶ –ú–æ—Ä–æ—Å—è—â–∏–π (—Å–ª–∞–±—ã–π)',53:'üå¶ –ú–æ—Ä–æ—Å—è—â–∏–π',
      55:'üå¶ –ú–æ—Ä–æ—Å—è—â–∏–π (—Å–∏–ª—å–Ω—ã–π)',61:'üåß –î–æ–∂–¥—å (—Å–ª–∞–±—ã–π)',63:'üåß –î–æ–∂–¥—å',65:'üåß –î–æ–∂–¥—å (—Å–∏–ª—å–Ω—ã–π)',
      71:'‚ùÑÔ∏è –°–Ω–µ–≥ (—Å–ª–∞–±—ã–π)',73:'‚ùÑÔ∏è –°–Ω–µ–≥',75:'‚ùÑÔ∏è –°–Ω–µ–≥ (—Å–∏–ª—å–Ω—ã–π)',80:'üå¶ –õ–∏–≤–µ–Ω—å (—Å–ª–∞–±—ã–π)',
      81:'üå¶ –õ–∏–≤–µ–Ω—å',82:'üåß –õ–∏–≤–µ–Ω—å (—Å–∏–ª—å–Ω—ã–π)',95:'‚õà –ì—Ä–æ–∑–∞',96:'‚õà –ì—Ä–æ–∑–∞ (–≥—Ä–∞–¥)',99:'‚õà –°–∏–ª—å–Ω–∞—è –≥—Ä–æ–∑–∞ (–≥—Ä–∞–¥)'
    };
    return {
      city: first.name, latitude: lat, longitude: lon,
      temperature: cur.temperature_2m, wind_speed: cur.wind_speed_10m,
      unit_temperature: tempUnit === 'fahrenheit' ? '¬∞F' : '¬∞C', unit_wind: windUnit,
      summary: map[cur.weather_code] || `–ö–æ–¥ –ø–æ–≥–æ–¥—ã: ${cur.weather_code}`, provider: 'open-meteo'
    };
  }
});

// math
const math = tool({
  description: '–í—ã—á–∏—Å–ª—è–µ—Ç –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ (+ - * / % ( )).',
  inputSchema: z.object({ expr: z.string() }),
  async execute({ expr }) {
    const ok = /^[\d\s+\-*/()%.,]+$/.test(expr || '');
    if (!ok) return { expr, error: '–†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ –∑–Ω–∞–∫–∏ +-*/()%.,' };
    try { return { expr, result: evalExpr(expr) }; } catch (e:any) { return { expr, error: String(e?.message || e) }; }
  }
});

/* ---------- shippingCost: —Ñ–∏–∫—Å. —Ñ–æ—Ä–º—É–ª–∞ (USD=basePrice√óweight; EUR ‚Äî –ø–æ –∫—É—Ä—Å—É) ---------- */
const EUR_RATE = Number(process.env.EUR_RATE || '0.92'); // 1 USD = 0.92 EUR –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

const shippingCost = tool({
  description: '–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞—Å—á—ë—Ç –¥–æ—Å—Ç–∞–≤–∫–∏: USD = basePrice √ó weightKg; EUR –ø–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –∫—É—Ä—Å—É.',
  inputSchema: z.object({
    fromCity: z.string(),
    toCity: z.string(),
    basePrice: z.number(),   // USD –∑–∞ –∫–≥
    weightKg: z.number().min(0)
  }),
  async execute({ fromCity, toCity, basePrice, weightKg }) {
    const totalUSD = +(basePrice * weightKg).toFixed(2);
    const totalEUR = +(totalUSD * EUR_RATE).toFixed(2);
    return {
      fromCity, toCity, basePrice, weightKg,
      totalUSD, totalEUR, eurRate: EUR_RATE
    };
  }
});

/* -------------- fallback –µ—Å–ª–∏ LLM ¬´–º–æ–ª—á–∏—Ç¬ª -------------- */
function lastUserText(messages: any[]): string {
  const u = [...messages].reverse().find((m) => m?.role === 'user');
  return String(u?.content || '');
}
function pickExpr(text:string){ const parts=(text||'').match(/[\d+\-*/()%.,\s]+/g)||[]; const c=parts.map(s=>s.trim()).filter(s=>s&&/[+\-*/()%]/.test(s)&&/\d/.test(s)); return c.sort((a,b)=>b.length-a.length)[0]; }
function pickTimezone(t:string){ const m=t.match(/([A-Za-z]+\/[A-Za-z_]+(?:\/[A-Za-z_]+)?)/); return m?.[1]; }

/* ‚Äî –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è fallback-–ø–æ–≥–æ–¥—ã */
function pickCityFromWeatherQuestion(t: string) {
  const m1 = t.match(/–ø–æ–≥–æ–¥[–∞—ã]?(?:\s+\S+){0,3}?\s+(?:–≤|–≤–æ|–Ω–∞)\s+([^?!.:,]+?)(?:\s+(?:–ø—Ä—è–º–æ\s+—Å–µ–π—á–∞—Å|—Å–µ–π—á–∞—Å|—Å–µ–≥–æ–¥–Ω—è))?[\s?!.:,]*$/iu);
  if (m1?.[1]) return normalizeRuLocative(m1[1]);
  const m2 = t.match(/\b(?:–≤|–≤–æ|–Ω–∞)\s+([A-Za-z\u0400-\u052F–Å—ë][A-Za-z\u0400-\u052F0-9–Å—ë\- ]{1,50})/u);
  if (m2?.[1]) return normalizeRuLocative(m2[1]);
  return undefined;
}

function parseShippingFromText(text: string) {
  // 1) JSON –±–ª–æ–∫
  const jsonMatch = text.match(/\{[\s\S]+\}/);
  if (jsonMatch) {
    try {
      const obj = JSON.parse(jsonMatch[0]);
      const fromCity = String(obj.fromCity ?? obj.from ?? '').trim();
      const toCity = String(obj.toCity ?? obj.to ?? '').trim();
      const basePrice = Number(String(obj.basePrice ?? obj.price ?? '').replace(',', '.'));
      const weightKg = Number(String(obj.weightKg ?? obj.weight ?? '').replace(',', '.'));
      if (fromCity && toCity && Number.isFinite(basePrice) && Number.isFinite(weightKg)) {
        return { fromCity, toCity, basePrice, weightKg };
      }
    } catch {}
  }
  // 2) —Ñ–æ—Ä–º–∞—Ç—ã a=b
  const fromCity = text.match(/–æ—Ç–∫—É–¥–∞\s*=\s*"?([^",]+)"?/i)?.[1]?.trim();
  const toCity = text.match(/–∫—É–¥–∞\s*=\s*"?([^",]+)"?/i)?.[1]?.trim();
  const basePrice = Number(text.match(/basePrice\s*[:=]\s*([0-9]+(?:[.,][0-9]+)?)/i)?.[1]?.replace(',','.'));
  const weightKg = Number(text.match(/weightKg\s*[:=]\s*([0-9]+(?:[.,][0-9]+)?)/i)?.[1]?.replace(',','.'));
  if (fromCity && toCity && Number.isFinite(basePrice) && Number.isFinite(weightKg)) {
    return { fromCity, toCity, basePrice, weightKg };
  }
  return null;
}

async function fallbackAnswer(messages:any[]){
  const text=lastUserText(messages);

  const expr = pickExpr(text);
  if (expr){
    try { return `–†–µ–∑—É–ª—å—Ç–∞—Ç: ${evalExpr(expr)}`; } catch(e:any){ return `–í—ã—Ä–∞–∂–µ–Ω–∏–µ: ${expr}\n–û—à–∏–±–∫–∞: ${e?.message||e}`; }
  }

  // –ü—Ä–æ—Å—Ç–æ–π offline-—Ä–∞—Å—á—ë—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ (–µ—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª–∞)
  if (/–¥–æ—Å—Ç–∞–≤–∫|shipment|shipping/i.test(text)){
    const p = parseShippingFromText(text);
    if (p) {
      const totalUSD = +(p.basePrice * p.weightKg).toFixed(2);
      const totalEUR = +(totalUSD * EUR_RATE).toFixed(2);
      return `–î–æ—Å—Ç–∞–≤–∫–∞ ${p.fromCity} ‚Üí ${p.toCity}\n–ò—Ç–æ–≥: ${totalUSD} USD ‚Ä¢ ${totalEUR} EUR (–∫—É—Ä—Å ${EUR_RATE})`;
    }
    return '–£–∫–∞–∂–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: –æ—Ç–∫—É–¥–∞, –∫—É–¥–∞, basePrice –∏ weightKg.';
  }

  if (/–ø–æ–≥–æ–¥|weather/i.test(text)){
    const city=pickCityFromWeatherQuestion(text);
    if (!city) return '–£–∫–∞–∂–∏ –≥–æ—Ä–æ–¥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–≥–æ–¥—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–ö–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –≤ –†–æ—Å—Ç–æ–≤–µ-–Ω–∞-–î–æ–Ω—É?¬ª).';
    const w:any=await weather.execute({ city });
    if (w?.error) return `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è "${city}": ${w.error}`;
    return `–ü–æ–≥–æ–¥–∞ –≤ ${w.city}: ${w.summary}, ${w.temperature}${w.unit_temperature}, –≤–µ—Ç–µ—Ä ${w.wind_speed} ${w.unit_wind} (open-meteo)`;
  }

  const tz = pickTimezone(text)||'UTC';
  const t:any = await time.execute({ timezone: tz });
  return `–°–µ–π—á–∞—Å –≤ ${t.timezone}: ${t.now}\n(–û—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ fallback)`;
}

/* ---------------- handler ---------------- */
export async function POST(req: NextRequest) {
  const t0 = Date.now();
  try {
    const body = await req.json().catch(() => ({}));
    const messagesIn = Array.isArray(body?.messages) ? body.messages : [];
    const systemOverride = typeof body?.system === 'string' ? String(body.system).slice(0, 4000) : undefined;
    const modelName = typeof body?.model === 'string' && body.model.trim()
      ? body.model.trim()
      : (process.env.NEXT_PUBLIC_DEFAULT_MODEL || 'gpt-4o-mini');

    if (!process.env.OPENAI_API_KEY) return new Response('OPENAI_API_KEY is missing', { status: 500 });

    const messages = messagesIn.filter((m:any)=>!(m?.role==='assistant' && (!m?.content || String(m?.content).trim()==='')));

    const openai = createOpenAI({ apiKey: process.env.OPENAI_API_KEY });
    const result = await streamText({
      model: openai(modelName),
      system: systemOverride || SYSTEM_PROMPT,
      messages,
      tools: { time, weather, math, shippingCost },
      toolChoice: 'auto',
      maxOutputTokens: 400
    });

    // guard: –µ—Å–ª–∏ –Ω–∏ –±–∞–π—Ç–∞ ‚Äî –æ—Ç–≤–µ—Ç–∏–º fallback'–æ–º
    const enc = new TextEncoder(); let wrote = false;
    const guarded = new ReadableStream({
      start(controller) {
        const reader = result.textStream.getReader();
        (async () => {
          try {
            while (true) {
              const { value, done } = await reader.read();
              if (done) break;
              if (value) { wrote = true; controller.enqueue(enc.encode(value)); }
            }
          } catch (e:any) {
            controller.enqueue(enc.encode(`\n[–û—à–∏–±–∫–∞ –ø–æ—Ç–æ–∫–∞: ${e?.message || e}]`));
          } finally {
            if (!wrote) {
              fallbackAnswer(messages).then((line)=>{ controller.enqueue(enc.encode(line)); controller.close(); })
              .catch(()=>{ controller.enqueue(enc.encode('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç.')); controller.close(); });
            } else controller.close();
          }
        })();
      }
    });

    const headers = new Headers();
    headers.set('X-AI-Server-PrepMs', String(Date.now() - t0));
    headers.set('X-AI-Model', modelName);
    headers.set('X-Accel-Buffering', 'no');
    headers.set('Cache-Control', 'no-cache');
    headers.set('Connection', 'keep-alive');
    headers.set('Content-Type', 'text/plain; charset=utf-8');

    return new Response(guarded, { headers });
  } catch (err:any) {
    return new Response(`API error: ${err?.message || 'Unhandled error'}`, { status: 500, headers: { 'Content-Type': 'text/plain; charset=utf-8' } });
  }
}
